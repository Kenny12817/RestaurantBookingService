import google.generativeai as genai
import json
import sqlite3

genai.configure(api_key=" ")
model = genai.GenerativeModel('gemini-pro')
chat = model.start_chat()

#Prompt
prompt1 = '''你是餐厅中的一名员工，我是客人，会预约餐厅中的桌子，餐厅中有'''
table_num = 4
prompt2 = '''张桌子，把我说的话转换成json格式，不用回答其它，格式如下:
```json
{
    "booking": [
        {"name":"desk1","start_time":"*18:00*","end_time":"*20:00*"},
        {"name":"desk2","start_time":"*20:00*","end_time":"*21:00*"}
    ]
}
```'''
prompt = prompt1 + str(table_num) + prompt2
#Send Message to gpt
chat.send_message(prompt)

#dbfile
dbfile = sqlite3.connect('Demo1.db')
cursor = dbfile.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS desk_bookings (
        id INTEGER PRIMARY KEY,
        desk_name TEXT NOT NULL,
        start_time TEXT NOT NULL,
        end_time TEXT NOT NULL
    )
''')

def check_time_collision(bookings):
    sorted_bookings = sorted(bookings, key=lambda x: x['start_time'])
    for j in range(len(sorted_bookings) - 1):
        current_end_time = sorted_bookings[j]['end_time']
        next_start_time = sorted_bookings[j + 1]['start_time']
        if current_end_time > next_start_time:
            return True  # 检测到相撞
    return False

while True:

    table_bookings = {}

    inp = input(">>>>>>> ")
    if inp == "quit":
        break

    response = chat.send_message(inp)
    text = response.text
    code_str = text.split("```")[1].replace('json', '').strip()

    try:
        code = json.loads(code_str)
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        continue

    for i in code["booking"]:
        desk_name = i['name']
        start_time = i['start_time']
        end_time = i['end_time']

        if desk_name not in table_bookings:
            table_bookings[desk_name] = []

        # Commit the changes to the database
        dbfile.commit()

        table_bookings[desk_name].append({"start_time": start_time, "end_time": end_time})
        print(f"{desk_name} from {start_time} to {end_time}") #customer command

        collision_detected = False
        if len(table_bookings[desk_name]) > 1:
            collision_detected = check_time_collision(table_bookings[desk_name])

        if collision_detected:
            print(f"桌子 {desk_name} 的预约时间发生相撞，请重新安排时间。")
        else:
            cursor.execute('''
                            INSERT INTO desk_bookings (desk_name, start_time, end_time)
                            VALUES (?, ?, ?)
                        ''', (desk_name, start_time, end_time))
            print(f"桌子 {desk_name} 的预约时间没有相撞，可以继续进行预约。")

# Close the cursor and connection
cursor.close()
dbfile.close()
